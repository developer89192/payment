orderController.js:
// controllers/orderController.js
const axios = require('axios');
const { createCashfreePayload, getCashfreeHeaders } = require('../utils/cashfree');
const { addOrderToUser } = require('./userOrderController'); // ✅ correct



// ======================= CREATE ORDER =======================
const Order = require('../models/orderModel'); // adjust the path based on your project structure

const createOrder = async (req, res) => {
  try {
   const { cart, customer, user_id, address } = req.body;


    if (!Array.isArray(cart) || cart.length === 0 || !customer?.pincode) {
      return res.status(400).json({ error: 'Missing cart or customer pincode' });
    }

    const pincode = customer.pincode;

    // ✅ 1. Fetch products available for this pincode only
    const productRes = await axios.get(`https://products-fetch.onrender.com/api/products?pincode=${pincode}`);
    const productsData = productRes.data;

    // ✅ 2. Validate cart and extract price info directly
    const validatedCart = cart.map(item => {
      const matchedProduct = productsData.find(p => p._id === item.productId);
      if (!matchedProduct) {
        throw new Error(`Product not available for pincode ${pincode}: ${item.productId}`);
      }

      return {
        productId: matchedProduct._id,
        name: matchedProduct.name,
        price: matchedProduct.price,
        quantity: item.quantity,
        subtotal: matchedProduct.price * item.quantity,
      };
    });

    // ✅ 3. Calculate total
    const totalAmount = validatedCart.reduce((sum, item) => sum + item.subtotal, 0);
    // ✅ Enforce minimum order amount
if (totalAmount < 10) {
  return res.status(400).json({ error: 'Minimum order amount is ₹10.' });
}
    const orderId = 'ORDER_' + Date.now();

    // ✅ 4. Prepare payload for Cashfree (optional if not COD)
    const payload = createCashfreePayload(orderId, customer, totalAmount, validatedCart, user_id);

    const cfRes = await axios.post('https://sandbox.cashfree.com/pg/orders', payload, {
      headers: getCashfreeHeaders(),
    });

    // ✅ 5. Save order
    const newOrder = new Order({
      orderId,
      cart: validatedCart.map(item => ({
        productId: item.productId,
        name: item.name,
        price: item.price,
        quantity: item.quantity,
      })),
      user_id,
      customer,
      totalAmount,
      paymentSessionId: cfRes.data.payment_session_id,
      paymentStatus: 'pending',
      paymentMode: null,
      orderStatus: null,
      deliveryStatus: null,
    });

    await newOrder.save();

    return res.json({
      payment_session_id: cfRes.data.payment_session_id,
      order_id: orderId,
    });

  } catch (err) {
    console.error('❌ Create Order Error:', err.response?.data || err.message);
    return res.status(500).json({
      error: 'Failed to create order',
      details: err.response?.data || err.message,
    });
  }
};




// ======================= CHECK PAYMENT STATUS =======================
const getPaymentStatus = async (req, res) => {
  const { order_id } = req.query;
  if (!order_id) return res.status(400).json({ error: 'Missing order_id' });

  try {
    const statusRes = await axios.get(`https://sandbox.cashfree.com/pg/orders/${order_id}`, {
      headers: getCashfreeHeaders(),
    });

    const status = statusRes.data.order_status;
    return res.json({ status: status.toUpperCase() });
  } catch (err) {
    console.error('❌ Status Check Error:', err.message);
    return res.status(500).json({ error: 'Failed to get payment status' });
  }
};

// ======================= (Optional) WEBHOOK =======================


const cashfreeWebhook = async (req, res) => {
  try {
    const { type, data } = req.body;
    const orderId = data?.order?.order_id;
    const paymentStatusRaw = data?.payment?.payment_status;
    const paymentMethodGroup = data?.payment?.payment_group;
    let paymentMethodDetails = '';

if (paymentMethodGroup === 'upi' && data?.payment?.payment_method?.upi?.upi_id) {
  paymentMethodDetails = `UPI: ${data.payment.payment_method.upi.upi_id}`;
} else if (paymentMethodGroup === 'card' && data?.payment?.payment_method?.card?.card_number) {
  paymentMethodDetails = `Card: ${data.payment.payment_method.card.card_number}`;
} else {
  paymentMethodDetails = paymentMethodGroup || 'unknown';
}

    

    console.log(`📦 Webhook received: ${type} for order ${orderId}, status: ${paymentStatusRaw}`);
    console.log('🔔 Webhook payload:', JSON.stringify(req.body, null, 2));

    if (!orderId || !paymentStatusRaw) {
      return res.status(400).json({ error: 'Missing required data in webhook payload' });
    }

    // 1. Translate Cashfree status
    let paymentStatus = 'pending';
    let orderStatus = null;

    if (paymentStatusRaw === 'SUCCESS') {
      paymentStatus = 'paid';
      orderStatus = 'confirmed';
    } else if (paymentStatusRaw === 'FAILED') {
      paymentStatus = 'failed';
      orderStatus = 'cancelled';
    }

    // 2. Update order in MongoDB
    const updatedOrder = await Order.findOneAndUpdate(
      { orderId },
      {
        paymentStatus,
        paymentMode: paymentMethodGroup || null,
        orderStatus,
      },
      { new: true }
    );

    if (!updatedOrder) {
      console.warn(`⚠️ No order found for orderId: ${orderId}`);
      return res.status(404).json({ error: 'Order not found' });
    }

    console.log(`✅ Order ${orderId} updated successfully in MongoDB`);

    // 3. Push to user database
    const userId = updatedOrder.user_id?.toString(); // ensure it's string
    if (userId && process.env.INTERNAL_API_KEY) {

const orderPayload = {
  order: {
    orderId: newOrder.orderId,
    orderStatus: newOrder.orderStatus,
    paymentStatus: newOrder.paymentStatus,
    paymentMethod: 'cod',
    deliveryStatus: newOrder.deliveryStatus,
    returnStatus: 'none',
    items: newOrder.cart.map(item => ({
      itemId: item.productId,
      itemName: item.name,
      quantity: item.quantity,
      price: item.price,
    })),
    totalPrice: newOrder.totalAmount,
    orderDate: newOrder.createdAt,
    address: newOrder.address, // ✅ Add this line
  },
};





      try {
        const response = await axios.post(
          `http://localhost:3000/api/users/${userId}/orders`,
          orderPayload,
          {
            headers: {
              'x-internal-api-key': process.env.INTERNAL_API_KEY,
              'Content-Type': 'application/json',
            },
          }
        );

        console.log(`📥 Order also added to user ${userId} via internal API`);
      } catch (apiErr) {
        console.error(`❌ Failed to sync with user DB:`, apiErr.response?.data || apiErr.message);
      }
    }

    return res.sendStatus(200);
  } catch (err) {
    console.error('❌ Webhook error:', err);
    return res.sendStatus(500);
  }
};







const createOrderCOD = async (req, res) => {
  try {
    const { cart, customer, user_id, address } = req.body;

    if (!Array.isArray(cart) || cart.length === 0 || !customer || !customer.pincode) {
      return res.status(400).json({ error: 'Missing cart, customer, or customer pincode in request.' });
    }

    const pincode = customer.pincode;
    const productIds = cart.map(item => item.productId);

    let productsData = [];
    try {
      const productRes = await axios.post(
        'https://productsdata-lj4d.onrender.com/api/products/by-ids',
        { productIds, pincode },
        { headers: { 'Content-Type': 'application/json' } }
      );
      productsData = productRes.data;
    } catch (fetchErr) {
      console.error(`❌ Error fetching products for pincode ${pincode}:`, fetchErr.response?.data || fetchErr.message);
      return res.status(500).json({ error: 'Failed to fetch product data.' });
    }

    if (!Array.isArray(productsData) || productsData.length === 0) {
      return res.status(404).json({ error: 'No products found for the items in your cart at the specified pincode.' });
    }

    const validatedCart = cart.map(item => {
      const matchedProduct = productsData.find(p => p._id === item.productId);
      if (!matchedProduct) {
        throw new Error(`Product not available for pincode ${pincode} or invalid: ${item.productId}`);
      }

      const productPrice = parseFloat(matchedProduct.discounted_price);
      if (isNaN(productPrice) || productPrice < 0) {
        throw new Error(`Invalid price for product ${item.productId}`);
      }
      if (item.quantity <= 0 || isNaN(item.quantity)) {
        throw new Error(`Invalid quantity for product ${item.productId}`);
      }

      return {
        productId: matchedProduct._id,
        name: matchedProduct.name,
        price: productPrice,
        quantity: item.quantity,
        subtotal: productPrice * item.quantity,
      };
    });

    const totalAmount = validatedCart.reduce((sum, item) => sum + item.subtotal, 0);

    if (totalAmount < 10) {
      return res.status(400).json({ error: 'Minimum order amount for COD is ₹10.' });
    } else if (totalAmount > 100) {
      return res.status(400).json({ error: 'COD supports orders under ₹100 only.' });
    }

    const orderId = 'COD_' + Date.now();

    const newOrder = new Order({
      orderId,
      cart: validatedCart.map(item => ({
        productId: item.productId,
        name: item.name,
        price: item.price,
        quantity: item.quantity,
      })),
      user_id,
      customer,
      address,
      totalAmount,
      paymentSessionId: null,
      paymentStatus: 'not paid',
      paymentMode: 'COD',
      paymentMethod: 'cod',
      orderStatus: 'confirmed',
      deliveryStatus: 'pending',
    });

    await newOrder.save();
    console.log(`✅ COD Order ${newOrder.orderId} saved to admin DB.`);

    // ✅ Save to users DB
    if (user_id) {
const userOrderData = {
  orderId: newOrder.orderId,
  orderStatus: newOrder.orderStatus,
  paymentStatus: newOrder.paymentStatus,
  paymentMethod: newOrder.paymentMethod,
  deliveryStatus: newOrder.deliveryStatus,
  returnStatus: 'none',
  items: newOrder.cart.map(item => ({
    itemId: item.productId,
    itemName: item.name,
    quantity: item.quantity,
    price: item.price,
  })),
  totalPrice: newOrder.totalAmount,
  orderDate: newOrder.createdAt,
  address: {
    name: newOrder.address?.name || '',
    apartment: newOrder.address?.apartment || '',
    street: newOrder.address?.street || '',
    type: newOrder.address?.type || '',
    lat: newOrder.address?.lat,
    lon: newOrder.address?.lon,
    pincode: newOrder.address?.pincode || '',
    address: newOrder.address?.address || '',
  }
};

      await addOrderToUser(user_id, userOrderData);
    }

    return res.json({
      message: 'COD order placed successfully',
      order_id: orderId,
      total_amount: totalAmount
    });

  } catch (err) {
    console.error('❌ Create COD Order Error:', err.message);
    return res.status(500).json({
      error: 'Failed to create COD order.',
      details: err.message,
    });
  }
};


module.exports = {
  createOrder,
  getPaymentStatus,
  cashfreeWebhook,
  createOrderCOD // 👈 Export the new handler
};













userOrderController.js:
const getUserModel = require('../models/userOrderModel');

const addOrderToUser = async (userId, orderData) => {
  try {
    const User = await getUserModel(); // get the User model from users DB

    // Add to orders array
    await User.findByIdAndUpdate(
      userId,
      { $push: { orders: orderData } },
      { new: true, runValidators: true }
    );

    console.log(`✅ Order ${orderData.orderId} added to user ${userId}`);
  } catch (err) {
    console.error('❌ Error syncing order to user DB:', err.message);
    throw err;
  }
};

module.exports = {
  addOrderToUser,
};


extractFilesToText.js:
// extractFilesToText.js

const fs = require('fs');
const path = require('path');

// 🟡 Add the paths to the files you want to extract
const filesToExtract = [
  'controllers/orderController.js',
  'controllers/userOrderController.js',
  'extractFilesToText.js',
  'generateTree.cjs',
  'models/orderModel.js',
  'models/userOrderModel.js',
  'routes/orderRoutes.js',
  'routes/pingRoute.js',
  'routes/userOrderRoutes.js',
  'server.js',
  'utils/cashfree.js',
  'utils/usersDbConnection.js',
];




const outputFile = 'selected_code_output.txt';

let output = '';

filesToExtract.forEach((filePath) => {
  const absolutePath = path.resolve(filePath);

  if (fs.existsSync(absolutePath)) {
    const code = fs.readFileSync(absolutePath, 'utf-8');
    const fileName = path.basename(filePath);

    output += `${fileName}:\n`;
    output += code + '\n\n';
  } else {
    console.warn(`⚠️ File not found: ${filePath}`);
  }
});

fs.writeFileSync(outputFile, output, 'utf-8');
console.log(`✅ Code from selected files saved to: ${outputFile}`);


generateTree.cjs:
// generateTree.cjs or generateTree.js (ESM-compatible with import adjustments)
const fs = require('fs');
const path = require('path');

// Folders/files to exclude
const exclude = ['node_modules', '.git', 'dist', 'build'];

function generateTree(dirPath, prefix = '') {
    const files = fs.readdirSync(dirPath).filter(file => !exclude.includes(file));

    files.forEach((file, index) => {
        const fullPath = path.join(dirPath, file);
        const isLast = index === files.length - 1;
        const stats = fs.statSync(fullPath);
        const treeSymbol = isLast ? '└── ' : '├── ';

        console.log(`${prefix}${treeSymbol}${file}`);

        if (stats.isDirectory()) {
            const newPrefix = prefix + (isLast ? '    ' : '│   ');
            generateTree(fullPath, newPrefix);
        }
    });
}

// Start from current directory
generateTree('.');


orderModel.js:
const mongoose = require('mongoose');

const orderSchema = new mongoose.Schema({
  orderId: { type: String, required: true, unique: true },
  cart: [{
    productId: { type: String, required: true },
    name: { type: String, required: true },
    price: { type: Number, required: true },
    quantity: { type: Number, required: true },
  }],
  user_id: { type: String, required: true },
  customer: {
    id: String,
    name: String,
    email: String,
    phone: String,
    pincode: String,
  },
  // ✅ Change address from String to Object
  address: {
    lat: { type: Number },
    lon: { type: Number },
    address: { type: String },
    apartment: { type: String },
    street: { type: String },
    name: { type: String },
    pincode: { type: String },
    type: { type: String },
    receiver_name: { type: String },
    receiver_mobile: { type: String }
  },
  totalAmount: { type: Number, required: true },
  paymentSessionId: { type: String },
  paymentStatus: { type: String, required: true },
  paymentMode: { type: String },
  paymentMethod: { type: String },
  orderStatus: { type: String },
  deliveryStatus: { type: String },
}, { timestamps: true });

module.exports = mongoose.models.OrderV2 || mongoose.model('OrderV2', orderSchema);


userOrderModel.js:
// models/userOrderModel.js
const mongoose = require('mongoose');
const connectUsersDb = require('../utils/usersDbConnection');

const userSchema = new mongoose.Schema({
  mobile_number: { type: String, required: true, unique: true },
  name: { type: String, default: '' },
  email: { type: String, default: '' },
  primary_address: {
    name: String,
    apartment: String,
    street: String,
    instructions: String,
    type: String,
    lat: Number,
    lon: Number,
    address: String,
  },
  saved_address: [{
    name: String,
    apartment: String,
    street: String,
    instructions: String,
    type: String,
    lat: Number,
    lon: Number,
    address: String,
    pincode: String,
    receiver_name: String,
    receiver_mobile: String,
  }],
  selected_recent_address: {
    address: String,
    apartment: { type: String, default: '' },
    street: { type: String, default: '' },
    name: { type: String, default: '' },
    lat: Number,
    lon: Number,
    type: String,
    pincode: String,
    receiver_name: String,
    receiver_mobile: String,
    _id: false,
  },
  multiple_recent_addresses: [{
    address: String,
    lat: Number,
    lon: Number,
    pincode: String,
  }],
orders: [{
  orderId: String,           // required
  orderStatus: String,
  paymentStatus: String,
  paymentMethod: String,
  deliveryStatus: String,
  returnStatus: String,
  items: [{
    itemId: String,
    itemName: String,
    quantity: Number,
    price: Number,
  }],
  totalPrice: Number,
  orderDate: Date,
  address: {
    name: String,
    apartment: String,
    street: String,
    type: String,
    lat: Number,
    lon: Number,
    pincode: String,
    address: String,
  }
}],
  updated_at: [Date],
  login_dates: [Date],
  account_created_at: { type: Date, default: Date.now },
  is_verified: { type: Boolean, default: false },
  refresh_token: String,
});

// Export model from the correct connection
let User;

const getUserModel = async () => {
  if (User) return User;
  const usersDb = await connectUsersDb();
  User = usersDb.model('User', userSchema);
  return User;
};

module.exports = getUserModel;


orderRoutes.js:
const express = require('express');
const { createOrder, getPaymentStatus, cashfreeWebhook,  createOrderCOD  } = require('../controllers/orderController');

const router = express.Router();

// ✅ Existing routes
router.post('/create-order', createOrder);
router.get('/payment-status', getPaymentStatus);
router.post('/webhook/cashfree', cashfreeWebhook);
// Update route to match frontend:
router.post('/create-cod-order', createOrderCOD);


// ✅ NEW TEST ROUTE (for debug)
router.get('/test', (req, res) => {
  res.send('✅ GET /test route works!');
});

module.exports = router;


pingRoute.js:
// routes/pingRoute.js
const express = require('express');
const router = express.Router();

router.get('/ping', (req, res) => {
  res.status(200).send('pong');
});

module.exports = router;


userOrderRoutes.js:


server.js:
// server.js
const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const mongoose = require('mongoose');
const orderRoutes = require('./routes/orderRoutes');
const pingRoute = require('./routes/pingRoute');
const connectUsersDb = require('./utils/usersDbConnection'); // ✅ import user DB connection

dotenv.config();

const app = express();
const PORT = 5001;

// Middlewares
app.use(cors({ origin: 'http://192.168.101.3:3001', credentials: true }));
app.use(express.json());

app.use((req, res, next) => {
  console.log(`📥 Received request: ${req.method} ${req.url}`);
  next();
});

app.use('/', pingRoute);
app.use('/api/orders', orderRoutes);

// Connect admin DB first
mongoose.connect(process.env.DB_URI)
  .then(async () => {
    console.log('✅ Admin DB connected');

    // ✅ Connect to Users DB too (only once)
    try {
      await connectUsersDb(); // will log its own messages
    } catch (err) {
      console.error('❌ Users DB connection failed:', err.message);
      process.exit(1); // stop if users DB is critical
    }

    // Start server after both DBs are connected
    app.listen(PORT, () => {
      console.log(`🚀 Server running at http://localhost:${PORT}`);
    });
  })
  .catch((err) => {
    console.error('❌ Admin DB connection failed:', err.message);
  });


cashfree.js:
// utils/cashfreeUtils.js

// Create the payload for Cashfree API
const createCashfreePayload = (orderId, customer, totalAmount, cart, user_id) => {
  return {
    order_id: orderId,
    order_currency: 'INR',
    order_amount: totalAmount.toFixed(2),
    user_id: user_id,
    customer_details: {
      customer_id: customer.id,
      customer_name: customer.name,
      customer_email: customer.email,
      customer_phone: customer.phone,
    },
    order_meta: {
      return_url: `http://localhost:5173/payment-status?order_id=${orderId}`,
      payment_methods: 'upi',
      // notify_url: 'https://8d8d-103-186-254-125.ngrok-free.app/api/orders/webhook/cashfree',
    },
  };
};

// Create headers for Cashfree API
const getCashfreeHeaders = () => {
  return {
    'Content-Type': 'application/json',
    'x-api-version': '2025-01-01',
    'x-client-id': process.env.CASHFREE_APP_ID,
    'x-client-secret': process.env.CASHFREE_SECRET_KEY,
  };
};

module.exports = { createCashfreePayload, getCashfreeHeaders };


usersDbConnection.js:
// utils/usersDbConnection.js
const mongoose = require('mongoose');

let usersDb = null;

const connectUsersDb = async () => {
  if (usersDb) return usersDb;

  const uri = process.env.MONGO_URI_USERS;
  if (!uri) {
    throw new Error("❌ Missing MONGO_URI_USERS in .env");
  }

  console.log("⏳ Attempting to connect to Users DB...");

  try {
    usersDb = mongoose.createConnection(uri); // ⬅️ no deprecated options

    await new Promise((resolve, reject) => {
      usersDb.once('open', resolve);
      usersDb.on('error', reject);
    });

    console.log("✅ Successfully connected to Users DB.");
    return usersDb;
  } catch (err) {
    console.error("❌ Users DB connection error:", err.message);
    throw err;
  }
};

module.exports = connectUsersDb;


